package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/adshao/go-binance/v2"
	"github.com/bwmarrin/discordgo"
)

const (
	channelId = "1107583747114672158"
)

var (
	Token string
)

func main() {

	var (
		// apiKey    = os.Getenv("BINANCE_API_KEY")
		// secretKey = os.Getenv("BINANCE_SECRET_KEY")
		apiKey    = ""
		secretKey = ""
	)

	// Create a new Discord session using the provided bot token.
	dg, err := discordgo.New("Bot " + Token)
	if err != nil {
		log.Fatal("error creating Discord session,", err)
		return
	}

	// Open a websocket connection to Discord and begin listening.
	err = dg.Open()
	if err != nil {
		log.Fatal("error opening connection,", err)
	}
	defer dg.Close()

	client := binance.NewClient(apiKey, secretKey)

	res, err := client.NewExchangeInfoService().Symbols().Do(context.Background())
	if err != nil {
		log.Fatal("Could not get new coins from client")
	}

	for _, e := range res.Symbols {
		embed := &discordgo.MessageEmbed{
			Author: &discordgo.MessageEmbedAuthor{},
			Fields: []*discordgo.MessageEmbedField{
				{
					Name:   "Symbol",
					Value:  e.Symbol,
					Inline: false,
				},

				{
					Name:   "Status",
					Value:  e.Status,
					Inline: false,
				},

				{
					Name:   "Base asset",
					Value:  e.BaseAsset,
					Inline: false,
				},

				{
					Name:   "Quote asset",
					Value:  e.QuoteAsset,
					Inline: false,
				},
			},
		}
		fmt.Printf("%s %s %s %s\n", e.Symbol, e.Status, e.BaseAsset, e.QuoteAsset)
		dg.ChannelMessageSendEmbed(channelId, embed)
	}

	// Wait here until CTRL-C or other term signal is received.
	fmt.Println("Bot is now running. Press CTRL-C to exit.")
	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt, os.Kill)
	<-sc

	// Cleanly close down the Discord session.
	dg.Close()
}
